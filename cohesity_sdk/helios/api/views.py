"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cohesity_sdk.helios.api_client import ApiClient, Endpoint as _Endpoint
from cohesity_sdk.helios.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from cohesity_sdk.helios.model.create_view_request import CreateViewRequest
from cohesity_sdk.helios.model.error import Error
from cohesity_sdk.helios.model.get_view_templates_result import GetViewTemplatesResult
from cohesity_sdk.helios.model.get_views_result import GetViewsResult
from cohesity_sdk.helios.model.template import Template
from cohesity_sdk.helios.model.view import View


class ViewsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_view(
            self,
            body,
            **kwargs
        ):
            """Create a View  # noqa: E501

            Creates a View.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_view(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (CreateViewRequest): Request to create a View.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                View
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.create_view = _Endpoint(
            settings={
                'response_type': (View,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/file-services/views',
                'operation_id': 'create_view',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (CreateViewRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_view
        )

        def __create_view_template(
            self,
            body,
            **kwargs
        ):
            """Create a View Template  # noqa: E501

            Creates a View Template.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_view_template(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (Template): Request to create a view template.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Template
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.create_view_template = _Endpoint(
            settings={
                'response_type': (Template,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/file-services/view-template',
                'operation_id': 'create_view_template',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (Template,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_view_template
        )

        def __delete_view(
            self,
            id,
            **kwargs
        ):
            """Delete a View  # noqa: E501

            Deletes a View based on given id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_view(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Specifies a unique id of the View to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.delete_view = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/file-services/views/{id}',
                'operation_id': 'delete_view',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_view
        )

        def __delete_view_template(
            self,
            id,
            **kwargs
        ):
            """Delete a View Template  # noqa: E501

            Deletes a view template based on given template id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_view_template(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Specifies a unique id of the view template to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.delete_view_template = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/file-services/view-template/{id}',
                'operation_id': 'delete_view_template',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_view_template
        )

        def __get_view_by_id(
            self,
            id,
            **kwargs
        ):
            """Get a View by Id  # noqa: E501

            Get a View based on given Id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_view_by_id(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Specifies a unique id of the View to delete.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                View
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_view_by_id = _Endpoint(
            settings={
                'response_type': (View,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/file-services/views/{id}',
                'operation_id': 'get_view_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_view_by_id
        )

        def __get_views(
            self,
            **kwargs
        ):
            """List Views  # noqa: E501

            If no parameters are specified, all Views on the Cohesity Cluster are returned.   Specifying parameters filters the results that are returned.   NOTE: If maxCount is set and the number of Views returned exceeds the maxCount,   there are more Views to return.   To get the next set of Views, send another request and specify the id of the   last View returned in viewList from the previous response.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_views(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                view_names ([str]): Filter by a list of View names.. [optional]
                view_ids ([int]): Filter by a list of View ids.. [optional]
                storage_domain_ids ([int]): Filter by a list of Storage Domains (View Boxes) specified by id.. [optional]
                storage_domain_names ([str]): Filter by a list of View Box names.. [optional]
                protocol_accesses ([str]): Filter by a list of protocol accesses. Only views with   protocol accesses in these specified accesses list will be returned.. [optional]
                match_partial_names (bool): If true, the names in viewNames are matched by any partial rather than   exactly matched.. [optional]
                max_count (int): Specifies a limit on the number of Views returned.. [optional]
                include_internal_views (bool): Specifies if internal Views created by the Cohesity Cluster are   also returned. In addition, regular Views are returned.. [optional]
                include_protection_groups (bool): Specifies if Protection Groups information needs to be returned along with   view metadata. By default, if not set or set to true, Group information is   returned.. [optional]
                max_view_id (int): If the number of Views to return exceeds the maxCount specified in the   original request, specify the id of the last View   from the viewList in the previous response   to get the next set of Views.. [optional]
                include_inactive (bool): Specifies if inactive Views on this Remote Cluster (which have   Snapshots copied by replication) should also be returned.   Inactive Views are not counted towards the maxCount.   By default, this field is set to false.. [optional]
                protection_group_ids ([int]): This field will be deprecated. Filter by Protection Group ids.   Return Views that are being protected by listed Groups, which are specified by ids.   If both protectionGroupIds and viewProtectionGroupIds are specified, only   viewProtectionGroupIds will be used.. [optional]
                view_protection_group_ids ([str]): Filter by Protection Group ids. Return Views that are being protected by   listed Groups, which are specified by ids.. [optional]
                view_count_only (bool): Whether to get just the total number of views with the given input   filters. If the flag is true, we ignore the parameter 'maxViews' for the   count. Also, if flag is true, list of views will not be returned.. [optional]
                sort_by_logical_usage (bool): If set to true, the list is sorted descending by logical usage.. [optional]
                internal_access_sids ([str]): Sids of restricted principals who can access the view. This is an   internal field and therefore does not have json tag.. [optional]
                match_alias_names (bool): If true, view aliases are also matched with the names in viewNames.. [optional]
                tenant_ids ([str]): TenantIds contains ids of the tenants for which objects are to be   returned.. [optional]
                include_tenants (bool): IncludeTenants specifies if objects of all the tenants under the   hierarchy of the logged in user's organization should be returned.. [optional]
                include_stats (bool): If set to true, stats of views will be returned. By default this parameter   is set to false.. [optional]
                include_file_count_by_size (bool): Whether to include View file count by size.. [optional]
                include_views_with_antivirus_enabled_only (bool): If set to true, the list will contain only the views for which antivirus   scan is enabled.. [optional]
                include_views_with_data_lock_enabled_only (bool): If set to true, the list will contain only the views for which either   file level data lock is enabled or view level data lock is enabled.. [optional]
                filer_audit_log_enabled (bool): If set to true, only views with filer audit log enabled will be returned.   If set to false, only views with filer audit log disabled will be returned.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GetViewsResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_views = _Endpoint(
            settings={
                'response_type': (GetViewsResult,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/file-services/views',
                'operation_id': 'get_views',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'view_names',
                    'view_ids',
                    'storage_domain_ids',
                    'storage_domain_names',
                    'protocol_accesses',
                    'match_partial_names',
                    'max_count',
                    'include_internal_views',
                    'include_protection_groups',
                    'max_view_id',
                    'include_inactive',
                    'protection_group_ids',
                    'view_protection_group_ids',
                    'view_count_only',
                    'sort_by_logical_usage',
                    'internal_access_sids',
                    'match_alias_names',
                    'tenant_ids',
                    'include_tenants',
                    'include_stats',
                    'include_file_count_by_size',
                    'include_views_with_antivirus_enabled_only',
                    'include_views_with_data_lock_enabled_only',
                    'filer_audit_log_enabled',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'protocol_accesses',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('protocol_accesses',): {

                        "NFS": "NFS",
                        "NFS4": "NFS4",
                        "SMB": "SMB",
                        "S3": "S3",
                        "SWIFT": "Swift"
                    },
                },
                'openapi_types': {
                    'view_names':
                        ([str],),
                    'view_ids':
                        ([int],),
                    'storage_domain_ids':
                        ([int],),
                    'storage_domain_names':
                        ([str],),
                    'protocol_accesses':
                        ([str],),
                    'match_partial_names':
                        (bool,),
                    'max_count':
                        (int,),
                    'include_internal_views':
                        (bool,),
                    'include_protection_groups':
                        (bool,),
                    'max_view_id':
                        (int,),
                    'include_inactive':
                        (bool,),
                    'protection_group_ids':
                        ([int],),
                    'view_protection_group_ids':
                        ([str],),
                    'view_count_only':
                        (bool,),
                    'sort_by_logical_usage':
                        (bool,),
                    'internal_access_sids':
                        ([str],),
                    'match_alias_names':
                        (bool,),
                    'tenant_ids':
                        ([str],),
                    'include_tenants':
                        (bool,),
                    'include_stats':
                        (bool,),
                    'include_file_count_by_size':
                        (bool,),
                    'include_views_with_antivirus_enabled_only':
                        (bool,),
                    'include_views_with_data_lock_enabled_only':
                        (bool,),
                    'filer_audit_log_enabled':
                        (bool,),
                },
                'attribute_map': {
                    'view_names': 'viewNames',
                    'view_ids': 'viewIds',
                    'storage_domain_ids': 'storageDomainIds',
                    'storage_domain_names': 'storageDomainNames',
                    'protocol_accesses': 'protocolAccesses',
                    'match_partial_names': 'matchPartialNames',
                    'max_count': 'maxCount',
                    'include_internal_views': 'includeInternalViews',
                    'include_protection_groups': 'includeProtectionGroups',
                    'max_view_id': 'maxViewId',
                    'include_inactive': 'includeInactive',
                    'protection_group_ids': 'protectionGroupIds',
                    'view_protection_group_ids': 'viewProtectionGroupIds',
                    'view_count_only': 'viewCountOnly',
                    'sort_by_logical_usage': 'sortByLogicalUsage',
                    'internal_access_sids': 'internalAccessSids',
                    'match_alias_names': 'matchAliasNames',
                    'tenant_ids': 'tenantIds',
                    'include_tenants': 'includeTenants',
                    'include_stats': 'includeStats',
                    'include_file_count_by_size': 'includeFileCountBySize',
                    'include_views_with_antivirus_enabled_only': 'includeViewsWithAntivirusEnabledOnly',
                    'include_views_with_data_lock_enabled_only': 'includeViewsWithDataLockEnabledOnly',
                    'filer_audit_log_enabled': 'filerAuditLogEnabled',
                },
                'location_map': {
                    'view_names': 'query',
                    'view_ids': 'query',
                    'storage_domain_ids': 'query',
                    'storage_domain_names': 'query',
                    'protocol_accesses': 'query',
                    'match_partial_names': 'query',
                    'max_count': 'query',
                    'include_internal_views': 'query',
                    'include_protection_groups': 'query',
                    'max_view_id': 'query',
                    'include_inactive': 'query',
                    'protection_group_ids': 'query',
                    'view_protection_group_ids': 'query',
                    'view_count_only': 'query',
                    'sort_by_logical_usage': 'query',
                    'internal_access_sids': 'query',
                    'match_alias_names': 'query',
                    'tenant_ids': 'query',
                    'include_tenants': 'query',
                    'include_stats': 'query',
                    'include_file_count_by_size': 'query',
                    'include_views_with_antivirus_enabled_only': 'query',
                    'include_views_with_data_lock_enabled_only': 'query',
                    'filer_audit_log_enabled': 'query',
                },
                'collection_format_map': {
                    'view_names': 'csv',
                    'view_ids': 'csv',
                    'storage_domain_ids': 'csv',
                    'storage_domain_names': 'csv',
                    'protocol_accesses': 'csv',
                    'protection_group_ids': 'csv',
                    'view_protection_group_ids': 'csv',
                    'internal_access_sids': 'csv',
                    'tenant_ids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_views
        )

        def __read_view_template_by_id(
            self,
            id,
            **kwargs
        ):
            """Read a View Template by Id  # noqa: E501

            Reads a view template based on given template id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.read_view_template_by_id(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Specifies a unique id of the view template.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Template
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.read_view_template_by_id = _Endpoint(
            settings={
                'response_type': (Template,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/file-services/view-template/{id}',
                'operation_id': 'read_view_template_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__read_view_template_by_id
        )

        def __read_view_templates(
            self,
            **kwargs
        ):
            """List View Templates  # noqa: E501

            All view templates on the Cohesity Cluster are returned.   Specifying parameters filters the results that are returned.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.read_view_templates(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GetViewTemplatesResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.read_view_templates = _Endpoint(
            settings={
                'response_type': (GetViewTemplatesResult,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/file-services/view-template',
                'operation_id': 'read_view_templates',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__read_view_templates
        )

        def __update_view(
            self,
            id,
            body,
            **kwargs
        ):
            """Update a View  # noqa: E501

            Updates a View based on given id.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_view(id, body, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Specifies a unique id of the View to update.
                body (View): Request to update a view.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                View
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.update_view = _Endpoint(
            settings={
                'response_type': (View,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/file-services/views/{id}',
                'operation_id': 'update_view',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'body',
                ],
                'required': [
                    'id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'body':
                        (View,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_view
        )

        def __update_view_template(
            self,
            id,
            body,
            **kwargs
        ):
            """Update a View Template  # noqa: E501

            Updates a View Template.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_view_template(id, body, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): Specifies a unique id of the view template.
                body (Template): Request to update a view template.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Template
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.update_view_template = _Endpoint(
            settings={
                'response_type': (Template,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/file-services/view-template/{id}',
                'operation_id': 'update_view_template',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'body',
                ],
                'required': [
                    'id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'body':
                        (Template,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_view_template
        )
