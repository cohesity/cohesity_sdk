"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cohesity_sdk.helios.api_client import ApiClient, Endpoint as _Endpoint
from cohesity_sdk.helios.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from cohesity_sdk.helios.model.error import Error
from cohesity_sdk.helios.model.get_mcm_objects_activity_req_params import GetMcmObjectsActivityReqParams
from cohesity_sdk.helios.model.get_object_snapshots_response_body import GetObjectSnapshotsResponseBody
from cohesity_sdk.helios.model.mcm_object_summary_result import McmObjectSummaryResult
from cohesity_sdk.helios.model.mcm_objects_activity import McmObjectsActivity
from cohesity_sdk.helios.model.mcm_tenant_object_ids import McmTenantObjectIds
from cohesity_sdk.helios.model.mcm_tenant_object_ids_params import McmTenantObjectIdsParams
from cohesity_sdk.helios.model.object_stats import ObjectStats


class HeliosObjectsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_mcm_object_snapshots(
            self,
            global_id,
            **kwargs
        ):
            """List the snapshots for a given object.  # noqa: E501

            List the snapshots for a given object.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_mcm_object_snapshots(global_id, async_req=True)
            >>> result = thread.get()

            Args:
                global_id (str): Specifies the global id of the Object.

            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                uuid (str): Specifies the uuid of the Object. This field is deprecated.. [optional]
                from_time_usecs (int): Specifies the timestamp in Unix time epoch in microseconds to filter Object's snapshots which are taken after this value.. [optional]
                to_time_usecs (int): Specifies the timestamp in Unix time epoch in microseconds to filter Object's snapshots which are taken before this value.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GetObjectSnapshotsResponseBody
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['global_id'] = \
                global_id
            return self.call_with_http_info(**kwargs)

        self.get_mcm_object_snapshots = _Endpoint(
            settings={
                'response_type': (GetObjectSnapshotsResponseBody,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/data-protect/objects/snapshots',
                'operation_id': 'get_mcm_object_snapshots',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'global_id',
                    'region_id',
                    'uuid',
                    'from_time_usecs',
                    'to_time_usecs',
                ],
                'required': [
                    'global_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'global_id':
                        (str,),
                    'region_id':
                        (str,),
                    'uuid':
                        (str,),
                    'from_time_usecs':
                        (int,),
                    'to_time_usecs':
                        (int,),
                },
                'attribute_map': {
                    'global_id': 'globalId',
                    'region_id': 'regionId',
                    'uuid': 'uuid',
                    'from_time_usecs': 'fromTimeUsecs',
                    'to_time_usecs': 'toTimeUsecs',
                },
                'location_map': {
                    'global_id': 'query',
                    'region_id': 'header',
                    'uuid': 'query',
                    'from_time_usecs': 'query',
                    'to_time_usecs': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_mcm_object_snapshots
        )

        def __get_mcm_object_stats(
            self,
            global_id,
            **kwargs
        ):
            """Get stats for a given object.  # noqa: E501

            Get stats for a given object.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_mcm_object_stats(global_id, async_req=True)
            >>> result = thread.get()

            Args:
                global_id (str): Specifies the global id of the Object. This field is required because we only fetches snapshots stats for one object.

            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                entity_hash (str): Specifies the entity hash global id of the Object. This field is deprecated.. [optional]
                region_ids ([str]): Specifies a list of region ids. Only records from clusters having these region ids will be returned.. [optional]
                cluster_identifiers ([str]): Specifies the list of cluster identifiers. Format is clusterId:clusterIncarnationId. Only records from clusters having these identifiers will be returned.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ObjectStats
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['global_id'] = \
                global_id
            return self.call_with_http_info(**kwargs)

        self.get_mcm_object_stats = _Endpoint(
            settings={
                'response_type': (ObjectStats,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/data-protect/objects/stats',
                'operation_id': 'get_mcm_object_stats',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'global_id',
                    'region_id',
                    'entity_hash',
                    'region_ids',
                    'cluster_identifiers',
                ],
                'required': [
                    'global_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'global_id':
                        (str,),
                    'region_id':
                        (str,),
                    'entity_hash':
                        (str,),
                    'region_ids':
                        ([str],),
                    'cluster_identifiers':
                        ([str],),
                },
                'attribute_map': {
                    'global_id': 'globalId',
                    'region_id': 'regionId',
                    'entity_hash': 'entityHash',
                    'region_ids': 'regionIds',
                    'cluster_identifiers': 'clusterIdentifiers',
                },
                'location_map': {
                    'global_id': 'query',
                    'region_id': 'header',
                    'entity_hash': 'query',
                    'region_ids': 'query',
                    'cluster_identifiers': 'query',
                },
                'collection_format_map': {
                    'region_ids': 'csv',
                    'cluster_identifiers': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_mcm_object_stats
        )

        def __get_mcm_object_summary(
            self,
            **kwargs
        ):
            """Get the summary for a given object.  # noqa: E501

            Get the objects summary across clusters.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_mcm_object_summary(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                cluster_identifiers ([str]): Specifies the list of cluster identifiers. Format is clusterId:clusterIncarnationId. Only records from clusters having these identifiers will be returned.. [optional]
                environments ([str]): Filter by environment types such as 'kVMware', 'kView', etc. Only Protected objects protecting the specified environment types are returned.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                McmObjectSummaryResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_mcm_object_summary = _Endpoint(
            settings={
                'response_type': (McmObjectSummaryResult,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/objects/summary',
                'operation_id': 'get_mcm_object_summary',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region_id',
                    'cluster_identifiers',
                    'environments',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'environments',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('environments',): {

                        "KVMWARE": "kVMware",
                        "KHYPERV": "kHyperV",
                        "KAZURE": "kAzure",
                        "KGCP": "kGCP",
                        "KKVM": "kKVM",
                        "KACROPOLIS": "kAcropolis",
                        "KAWS": "kAWS",
                        "KAWSNATIVE": "kAWSNative",
                        "KAWSSNAPSHOTMANAGER": "kAWSSnapshotManager",
                        "KRDSSNAPSHOTMANAGER": "kRDSSnapshotManager",
                        "KAURORASNAPSHOTMANAGER": "kAuroraSnapshotManager",
                        "KPHYSICAL": "kPhysical",
                        "KGPFS": "kGPFS",
                        "KELASTIFILE": "kElastifile",
                        "KNETAPP": "kNetapp",
                        "KGENERICNAS": "kGenericNas",
                        "KISILON": "kIsilon",
                        "KFLASHBLADE": "kFlashBlade",
                        "KPURE": "kPure",
                        "KSQL": "kSQL",
                        "KEXCHANGE": "kExchange",
                        "KAD": "kAD",
                        "KORACLE": "kOracle",
                        "KVIEW": "kView",
                        "KREMOTEADAPTER": "kRemoteAdapter",
                        "KO365": "kO365",
                        "KO365PUBLICFOLDERS": "kO365PublicFolders",
                        "KO365TEAMS": "kO365Teams",
                        "KO365GROUP": "kO365Group",
                        "KO365EXCHANGE": "kO365Exchange",
                        "KO365ONEDRIVE": "kO365OneDrive",
                        "KO365SHAREPOINT": "kO365Sharepoint",
                        "KKUBERNETES": "kKubernetes",
                        "KCASSANDRA": "kCassandra",
                        "KMONGODB": "kMongoDB",
                        "KCOUCHBASE": "kCouchbase",
                        "KHDFS": "kHdfs",
                        "KHIVE": "kHive",
                        "KHBASE": "kHBase",
                        "KUDA": "kUDA",
                        "KSFDC": "kSfdc"
                    },
                },
                'openapi_types': {
                    'region_id':
                        (str,),
                    'cluster_identifiers':
                        ([str],),
                    'environments':
                        ([str],),
                },
                'attribute_map': {
                    'region_id': 'regionId',
                    'cluster_identifiers': 'clusterIdentifiers',
                    'environments': 'environments',
                },
                'location_map': {
                    'region_id': 'header',
                    'cluster_identifiers': 'query',
                    'environments': 'query',
                },
                'collection_format_map': {
                    'cluster_identifiers': 'csv',
                    'environments': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_mcm_object_summary
        )

        def __get_mcm_objects_activity(
            self,
            **kwargs
        ):
            """Get Object activity on Helios.  # noqa: E501

            Get object activity on Helios. Activity includes Protection Group Runs and Recoveries.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_mcm_objects_activity(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                region_ids ([str]): Filter by a list of region ids.. [optional]
                body (GetMcmObjectsActivityReqParams): Request parameters to filter object activity.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                McmObjectsActivity
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_mcm_objects_activity = _Endpoint(
            settings={
                'response_type': (McmObjectsActivity,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/data-protect/objects/activity',
                'operation_id': 'get_mcm_objects_activity',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'region_id',
                    'region_ids',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'region_id':
                        (str,),
                    'region_ids':
                        ([str],),
                    'body':
                        (GetMcmObjectsActivityReqParams,),
                },
                'attribute_map': {
                    'region_id': 'regionId',
                    'region_ids': 'regionIds',
                },
                'location_map': {
                    'region_id': 'header',
                    'region_ids': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                    'region_ids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__get_mcm_objects_activity
        )

        def __mcm_get_tenant_object_ids(
            self,
            body,
            **kwargs
        ):
            """GetTenantObjectIds  # noqa: E501

            Get the object IDs for a given DMaaS tenant given a list of object hashes.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mcm_get_tenant_object_ids(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (McmTenantObjectIdsParams): Specifies the parameters to fetch object IDs.

            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                McmTenantObjectIds
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.mcm_get_tenant_object_ids = _Endpoint(
            settings={
                'response_type': (McmTenantObjectIds,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/tenants/object-ids',
                'operation_id': 'mcm_get_tenant_object_ids',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                    'region_id',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (McmTenantObjectIdsParams,),
                    'region_id':
                        (str,),
                },
                'attribute_map': {
                    'region_id': 'regionId',
                },
                'location_map': {
                    'body': 'body',
                    'region_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__mcm_get_tenant_object_ids
        )
