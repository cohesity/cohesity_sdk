"""
    Cohesity REST API

    Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cohesity_sdk.helios.api_client import ApiClient, Endpoint as _Endpoint
from cohesity_sdk.helios.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from cohesity_sdk.helios.model.error import Error
from cohesity_sdk.helios.model.mcm_agent_images_response import McmAgentImagesResponse
from cohesity_sdk.helios.model.mcm_source_registration import McmSourceRegistration
from cohesity_sdk.helios.model.mcm_source_registration_request_params import McmSourceRegistrationRequestParams
from cohesity_sdk.helios.model.mcm_source_registration_update_request_params import McmSourceRegistrationUpdateRequestParams
from cohesity_sdk.helios.model.mcm_sources import McmSources
from cohesity_sdk.helios.model.source_connection_request_params import SourceConnectionRequestParams
from cohesity_sdk.helios.model.source_connection_response_params import SourceConnectionResponseParams


class HeliosProtectionSourcesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __mcm_delete_protection_source_registration(
            self,
            id,
            **kwargs
        ):
            """Delete Protection Source Registration.  # noqa: E501

            Delete Protection Source Registration.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mcm_delete_protection_source_registration(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Specifies the ID of the Protection Source Registration.

            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.mcm_delete_protection_source_registration = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/data-protect/sources/registrations/{id}',
                'operation_id': 'mcm_delete_protection_source_registration',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'region_id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'region_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'region_id': 'regionId',
                },
                'location_map': {
                    'id': 'path',
                    'region_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mcm_delete_protection_source_registration
        )

        def __mcm_get_agent_image_details(
            self,
            **kwargs
        ):
            """Get agent images details.  # noqa: E501

            Get agent information on Helios.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mcm_get_agent_image_details(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                platform (str): Specifies a platform for which agent information need to be fetched.. [optional]
                package_type (str): Specifies a package type for which agent information need to be fetched.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                McmAgentImagesResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.mcm_get_agent_image_details = _Endpoint(
            settings={
                'response_type': (McmAgentImagesResponse,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/data-protect/agents/images',
                'operation_id': 'mcm_get_agent_image_details',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region_id',
                    'platform',
                    'package_type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'platform',
                    'package_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('platform',): {

                        "WINDOWS": "Windows",
                        "LINUX": "Linux",
                        "SOLARIS": "Solaris"
                    },
                    ('package_type',): {

                        "SCRIPT": "Script",
                        "RPM": "RPM",
                        "SUSERPM": "SuseRPM",
                        "DEB": "DEB"
                    },
                },
                'openapi_types': {
                    'region_id':
                        (str,),
                    'platform':
                        (str,),
                    'package_type':
                        (str,),
                },
                'attribute_map': {
                    'region_id': 'regionId',
                    'platform': 'platform',
                    'package_type': 'packageType',
                },
                'location_map': {
                    'region_id': 'header',
                    'platform': 'query',
                    'package_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mcm_get_agent_image_details
        )

        def __mcm_get_protection_source_registration(
            self,
            id,
            **kwargs
        ):
            """Get a Protection Source registration.  # noqa: E501

            Get a Protection Source registration.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mcm_get_protection_source_registration(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Specifies the id of the Protection Source registration.

            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                McmSourceRegistration
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.mcm_get_protection_source_registration = _Endpoint(
            settings={
                'response_type': (McmSourceRegistration,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/data-protect/sources/registrations/{id}',
                'operation_id': 'mcm_get_protection_source_registration',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'region_id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'region_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'region_id': 'regionId',
                },
                'location_map': {
                    'id': 'path',
                    'region_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mcm_get_protection_source_registration
        )

        def __mcm_get_protection_sources(
            self,
            **kwargs
        ):
            """Get a List of Protection Sources.  # noqa: E501

            Get a List of Protection Sources.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mcm_get_protection_sources(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                environments ([str]): Specifies the list of environment type of the Protection Source.. [optional]
                ids ([str]): Specifies the list of ids to filter Protection Sources.. [optional]
                region_ids ([str]): Filter by a list of region ids.. [optional]
                exclude_protection_stats (bool): Whether to exclude Protection Sources protection stats in response.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                McmSources
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.mcm_get_protection_sources = _Endpoint(
            settings={
                'response_type': (McmSources,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/data-protect/sources',
                'operation_id': 'mcm_get_protection_sources',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region_id',
                    'environments',
                    'ids',
                    'region_ids',
                    'exclude_protection_stats',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'environments',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('environments',): {

                        "KVMWARE": "kVMware",
                        "KHYPERV": "kHyperV",
                        "KACROPOLIS": "kAcropolis",
                        "KKVM": "kKVM",
                        "KAWS": "kAWS",
                        "KGCP": "kGCP",
                        "KAZURE": "kAzure",
                        "KPHYSICAL": "kPhysical",
                        "KPURE": "kPure",
                        "KNIMBLE": "kNimble",
                        "KNETAPP": "kNetapp",
                        "KGENERICNAS": "kGenericNas",
                        "KISILON": "kIsilon",
                        "KFLASHBLADE": "kFlashBlade",
                        "KGPFS": "kGPFS",
                        "KELASTIFILE": "kElastifile",
                        "KO365": "kO365",
                        "KHYPERFLEX": "kHyperFlex",
                        "KKUBERNETES": "kKubernetes",
                        "KCASSANDRA": "kCassandra",
                        "KMONGODB": "kMongoDB",
                        "KCOUCHBASE": "kCouchbase",
                        "KHDFS": "kHdfs",
                        "KHIVE": "kHive",
                        "KHBASE": "kHBase",
                        "KUDA": "kUDA",
                        "KSQL": "kSQL",
                        "KORACLE": "kOracle",
                        "KSFDC": "kSfdc"
                    },
                },
                'openapi_types': {
                    'region_id':
                        (str,),
                    'environments':
                        ([str],),
                    'ids':
                        ([str],),
                    'region_ids':
                        ([str],),
                    'exclude_protection_stats':
                        (bool,),
                },
                'attribute_map': {
                    'region_id': 'regionId',
                    'environments': 'environments',
                    'ids': 'ids',
                    'region_ids': 'regionIds',
                    'exclude_protection_stats': 'excludeProtectionStats',
                },
                'location_map': {
                    'region_id': 'header',
                    'environments': 'query',
                    'ids': 'query',
                    'region_ids': 'query',
                    'exclude_protection_stats': 'query',
                },
                'collection_format_map': {
                    'environments': 'csv',
                    'ids': 'csv',
                    'region_ids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__mcm_get_protection_sources
        )

        def __mcm_register_protection_source(
            self,
            body,
            **kwargs
        ):
            """Register a Protection Source.  # noqa: E501

            Register a Protection Source.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mcm_register_protection_source(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (McmSourceRegistrationRequestParams): Specifies the parameters to register a Protection Source.

            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                access_cluster_id (int): Specifies the destination cluster id on which this Source needs to be registered.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                McmSourceRegistration
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.mcm_register_protection_source = _Endpoint(
            settings={
                'response_type': (McmSourceRegistration,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/data-protect/sources/registrations',
                'operation_id': 'mcm_register_protection_source',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                    'region_id',
                    'access_cluster_id',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (McmSourceRegistrationRequestParams,),
                    'region_id':
                        (str,),
                    'access_cluster_id':
                        (int,),
                },
                'attribute_map': {
                    'region_id': 'regionId',
                    'access_cluster_id': 'accessClusterId',
                },
                'location_map': {
                    'body': 'body',
                    'region_id': 'header',
                    'access_cluster_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__mcm_register_protection_source
        )

        def __mcm_test_source_connection(
            self,
            body,
            **kwargs
        ):
            """Test connection to a source.  # noqa: E501

            Specifies the endpoint to test the source connectivity.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mcm_test_source_connection(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (SourceConnectionRequestParams): Specifies the parameters to test connectivity of a Protection Source.

            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                access_cluster_id (int): Specifies the destination cluster id on which this Source needs to be registered.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SourceConnectionResponseParams
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.mcm_test_source_connection = _Endpoint(
            settings={
                'response_type': (SourceConnectionResponseParams,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/data-protect/sources/test-connection',
                'operation_id': 'mcm_test_source_connection',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                    'region_id',
                    'access_cluster_id',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (SourceConnectionRequestParams,),
                    'region_id':
                        (str,),
                    'access_cluster_id':
                        (int,),
                },
                'attribute_map': {
                    'region_id': 'regionId',
                    'access_cluster_id': 'accessClusterId',
                },
                'location_map': {
                    'body': 'body',
                    'region_id': 'header',
                    'access_cluster_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__mcm_test_source_connection
        )

        def __update_protection_source_registration_mixin1(
            self,
            id,
            body,
            **kwargs
        ):
            """Update Protection Source registration.  # noqa: E501

            Update Protection Source registration.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_protection_source_registration_mixin1(id, body, async_req=True)
            >>> result = thread.get()

            Args:
                id (str): Specifies the id of the Protection Source registration.
                body (McmSourceRegistrationUpdateRequestParams): Specifies the parameters to update the registration.

            Keyword Args:
                region_id (str): This field uniquely represents a region and is used for making Helios calls to a specific region.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                McmSourceRegistration
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.update_protection_source_registration_mixin1 = _Endpoint(
            settings={
                'response_type': (McmSourceRegistration,),
                'auth': [
                    'TokenHeader',
                    'ClusterId',
                    'APIKeyHeader'
                ],
                'endpoint_path': '/mcm/data-protect/sources/registrations/{id}',
                'operation_id': 'update_protection_source_registration_mixin1',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'body',
                    'region_id',
                ],
                'required': [
                    'id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'body':
                        (McmSourceRegistrationUpdateRequestParams,),
                    'region_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'region_id': 'regionId',
                },
                'location_map': {
                    'id': 'path',
                    'body': 'body',
                    'region_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_protection_source_registration_mixin1
        )
