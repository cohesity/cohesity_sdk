"""
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.  # noqa: E501

The version of the OpenAPI document: 2.0
Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from cohesity_sdk.cluster.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)


def lazy_import():
    from cohesity_sdk.cluster.model.add_active_directory_principals_parameters import (
        AddActiveDirectoryPrincipalsParameters,
    )
    from cohesity_sdk.cluster.model.added_active_directory_principal_all_of import (
        AddedActiveDirectoryPrincipalAllOf,
    )

    globals()[
        "AddActiveDirectoryPrincipalsParameters"
    ] = AddActiveDirectoryPrincipalsParameters
    globals()["AddedActiveDirectoryPrincipalAllOf"] = AddedActiveDirectoryPrincipalAllOf


class AddedActiveDirectoryPrincipal(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.

      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.

    """

    allowed_values = {
        ("object_class",): {
            "None": None,
            "USER": "User",
            "GROUP": "Group",
            "COMPUTER": "Computer",
            "WELLKNOWNPRINCIPAL": "WellKnownPrincipal",
            "SERVICEACCOUNT": "ServiceAccount",
        },
    }

    validations = {
        ("domain_name",): {
            "regex": {
                "pattern": r"^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\-]{0,61}[a-zA-Z0-9]))*$",  # noqa: E501
            },
        },
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            "domain_name": (
                str,
                none_type,
            ),  # noqa: E501
            "name": (
                str,
                none_type,
            ),  # noqa: E501
            "object_class": (
                str,
                none_type,
            ),  # noqa: E501
            "description": (
                str,
                none_type,
            ),  # noqa: E501
            "restricted": (
                bool,
                none_type,
            ),  # noqa: E501
            "roles": (
                [str],
                none_type,
            ),  # noqa: E501
            "created_time_msecs": (
                int,
                none_type,
            ),  # noqa: E501
            "last_updated_time_msecs": (
                int,
                none_type,
            ),  # noqa: E501
            "sid": (
                str,
                none_type,
            ),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None

    attribute_map = {
        "domain_name": "domainName",  # noqa: E501
        "name": "name",  # noqa: E501
        "object_class": "objectClass",  # noqa: E501
        "description": "description",  # noqa: E501
        "restricted": "restricted",  # noqa: E501
        "roles": "roles",  # noqa: E501
        "created_time_msecs": "createdTimeMsecs",  # noqa: E501
        "last_updated_time_msecs": "lastUpdatedTimeMsecs",  # noqa: E501
        "sid": "sid",  # noqa: E501
    }

    required_properties = set(
        [
            "_data_store",
            "_check_type",
            "_spec_property_naming",
            "_path_to_item",
            "_configuration",
            "_visited_composed_classes",
            "_composed_instances",
            "_var_name_to_model_instances",
            "_additional_properties_model_instances",
        ]
    )

    @convert_js_args_to_python_args
    def __init__(self, domain_name, name, object_class, *args, **kwargs):  # noqa: E501
        """AddedActiveDirectoryPrincipal - a model defined in OpenAPI

        Args:
            domain_name (str, none_type): Specifies the domain of the Active Directory where the referenced principal is stored.
            name (str, none_type): Specifies the name of the Active Directory principal, that will be referenced by the group or user. The name of the Active Directory principal is used for naming the new group or user on the Cohesity Cluster.
            object_class (str, none_type): Specifies the type of Active Directory principal.<br> 'User' specifies a user object class.<br> 'Group' specifies a group object class.<br> 'ServiceAccount' specifies a service account object class.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)

            description (str, none_type): Specifies a description about the user or group.. [optional]  # noqa: E501
            restricted (bool, none_type): Whether the principal is a restricted principal. A restricted principal can only view the objects he has permissions to.. [optional]  # noqa: E501
            roles ([str], none_type): Specifies the Cohesity roles to associate with this user or group such as 'Admin', 'Ops' or 'View'. The Cohesity roles determine privileges on the Cohesity Cluster for this group or user. For example if the 'joe' user is added form the Active Directory and is associated with the Cohesity 'View' role,'joe' can log in to the Cohesity Dashboard and has a read-only view of the data on the Cohesity Cluster.. [optional]  # noqa: E501
            created_time_msecs (int, none_type): Specifies the epoch time in milliseconds when the group or user was added to the Cohesity Cluster.. [optional]  # noqa: E501
            last_updated_time_msecs (int, none_type): Specifies the epoch time in milliseconds when the group or user was last modified on the Cohesity Cluster.. [optional]  # noqa: E501
            sid (str, none_type): Specifies the unique Security ID (SID) of the Active Directory principal associated with this group or user.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", False)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            "_check_type": _check_type,
            "_path_to_item": _path_to_item,
            "_spec_property_naming": _spec_property_naming,
            "_configuration": _configuration,
            "_visited_composed_classes": self._visited_composed_classes,
        }
        required_args = {
            "domain_name": domain_name,
            "name": name,
            "object_class": object_class,
        }
        model_args = {}
        model_args.update(required_args)
        model_args.update(kwargs)
        composed_info = validate_get_composed_info(constant_args, model_args, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        unused_args = composed_info[3]

        for var_name, var_value in required_args.items():
            setattr(self, var_name, var_value)
        for var_name, var_value in kwargs.items():
            if (
                var_name in unused_args
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and not self._additional_properties_model_instances
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error beause the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
            "anyOf": [],
            "allOf": [
                AddActiveDirectoryPrincipalsParameters,
                AddedActiveDirectoryPrincipalAllOf,
            ],
            "oneOf": [],
        }
